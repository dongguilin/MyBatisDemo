<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/data/mongo
        http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd">
	<!--自动注册bean,并检查@Required,@Autowired的属性已被注入,同时支持注解bean -->
	<context:component-scan base-package="com.guilin.mybatis">
	</context:component-scan>
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<!-- 配置属性文件列表 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:properties/c3p0-config.properties</value>
				<value>classpath*:properties/jdbc-config.properties</value>
				<value>classpath*:properties/system.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置c3p0数据源 公共部分 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${database.jdbc.driver}" />
		<property name="user" value="${database.jdbc.username}" />
		<property name="jdbcUrl" value="${database.jdbc.url}" />
		<property name="password" value="${database.jdbc.password}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<property name="maxStatements" value="${c3p0.maxStatements}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}" />
		<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
	</bean>

	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource" ref="dataSource" /> </bean> <bean id="namedParameterJdbcTemplate" 
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"> 
		<constructor-arg ref="dataSource" /> </bean> -->

	<!-- 配置spring的transactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 开启事务控制的注解支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor"
		lazy-init="default" autowire="default">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">-Exception</prop>
				<prop key="save*">-Exception</prop>
				<prop key="modify*">-Exception</prop>
				<prop key="update*">-Exception</prop>
				<prop key="delete*">-Exception</prop>
				<prop key="create*">-Exception</prop>
				<prop key="del*">-Exception</prop>
				<prop key="remove*">-Exception</prop>
				<prop key="load*">readOnly</prop>
				<prop key="list*">readOnly</prop>
				<prop key="find*">readOnly</prop>
				<prop key="query*">readOnly</prop>
				<prop key="get*">readOnly</prop>
			</props>
		</property>
	</bean>
	
	<!-- mongo的配置 -->
    <!-- Default bean name is 'mongo' -->
    <!--  -->
	<mongo:mongo host="${database.mongodb.host}" port="${database.mongodb.port}">
		<mongo:options connections-per-host="8"
			           threads-allowed-to-block-for-connection-multiplier="4"
			           connect-timeout="30000" 
			           max-wait-time="30000" 
			           auto-connect-retry="true"
			           socket-keep-alive="true" 
			           socket-timeout="30000" 
			           slave-ok="true"
			           write-number="1" 
			           write-timeout="30000" 
			           write-fsync="true" />
	</mongo:mongo>
	<mongo:db-factory dbname="${database.mongodb.database}" mongo-ref="mongo"/>

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
		<property name="writeConcern" value="SAFE" />
	</bean>

	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"
		lazy-init="default" autowire="default">
		<property name="beanNames">
			<value>*Service</value>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>

	<!-- define the SqlSessionFactory, notice that configLocation is not needed 
		when you use MapperFactoryBean org.mybatis.spring.SqlSessionFactoryBean-->
	<bean id="sessionFactory" class="com.aleiye.business.common.MySqlSessionFactoryBean">
		<property name="resourcePattern" value="*Entity.class" />
		<property name="typeAliasesPackage" value="com.aleiye.business.**.entity" />
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:spring/mybatis-configuration.xml" />
		<property name="mapperLocations">
            <list>
                <value>classpath*:com/aleiye/**/dao/*Mapper.xml</value>
            </list>
        </property>
	</bean>

	<!-- scan for mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
		<property name="basePackage" value="com.aleiye.business.**.dao" />
	</bean>
</beans>